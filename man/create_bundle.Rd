% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/project.R
\name{create_bundle}
\alias{create_bundle}
\title{Generate a 'deployment ready' bundle of the a project app}
\usage{
create_bundle(
  project,
  path = getwd(),
  name = "MCView_bundle",
  overwrite = FALSE,
  self_contained = FALSE,
  branch = "latest_release",
  restart = overwrite,
  permissions = NULL,
  light_version = FALSE,
  ...
)
}
\arguments{
\item{project}{path to the project directory}

\item{path}{path in which to create the bundle.}

\item{name}{name of the folder in which to create the bundle. The bundle would be created at \code{path}/\code{name}}

\item{overwrite}{overwrite bundle if already exists}

\item{self_contained}{include the source code of \code{MCView} in the bundle
and use it to run the app. Use this in order to ensure that the package would always
run the same way, regardless of MCView changes. When this option is FALSE,
the version of \code{MCView} which is installed on the server would be loaded, which can be occasionally
be different than the one used when creating the app. By default, the code uses the latest \code{MCView} release would be used, see \code{branch} for
other options.}

\item{branch}{name of the \code{MCView} branch to include when \code{self_contained=TRUE}. By default, the latest release would be used. You can set this
parameter to NULL in order to include the current development version
('master' branch), or set it to any other branch in the 'tanaylab/MCView' github
repository.}

\item{restart}{add a file named 'restart.txt' to the bundle. This would force shiny-server to restart the app when updated.}

\item{permissions}{change the file permissions of the bundle after creation, e.g. "777". When NULL -
permissions would not be changed.}

\item{light_version}{create a light version of the bundle, which would not include features that require heavy computation (e.g. changing Marker genes, Gene modules etc.)}

\item{...}{
  Arguments passed on to \code{\link[gert:git_fetch]{gert::git_clone}}
  \describe{
    \item{\code{password}}{a string or a callback function to get passwords for authentication
or password protected ssh keys. Defaults to \link[askpass:askpass]{askpass} which
checks \code{getOption('askpass')}.}
    \item{\code{ssh_key}}{path or object containing your ssh private key. By default we
look for keys in \code{ssh-agent} and \link[credentials:ssh_credentials]{credentials::ssh_key_info}.}
    \item{\code{verbose}}{display some progress info while downloading}
    \item{\code{mirror}}{use the \code{--mirror} flag}
    \item{\code{url}}{remote url. Typically starts with \verb{https://github.com/} for public
repositories, and \verb{https://yourname@github.com/} or \verb{git@github.com/} for
private repos. You will be prompted for a password or pat when needed.}
    \item{\code{bare}}{use the \code{--bare} flag}
  }}
}
\description{
Generate a 'deployment ready' bundle of the a project app
}
\details{
Create a minimal shiny app in \code{path}/\code{name} directory which would contain:
\itemize{
\item{}{app.R file. }
\item{}{project config and cache. }
}

The bundle can then be deployed in shiny-server, shinyapps.io or any other environment that supports serving shiny apps.

Note: when deploying to these services - make sure you have the MCView package installed.
}
\examples{
\dontrun{
MCView::create_bundle(project = "PBMC", path = getwd(), name = "PBMC")

# latest release
MCView::create_bundle(project = "PBMC", path = getwd(), name = "PBMC", self_contained = TRUE)

# development version
MCView::create_bundle(project = "PBMC", path = getwd(), name = "PBMC", self_contained = TRUE, branch = NULL)

# specific branch
MCView::create_bundle(project = "PBMC", path = getwd(), name = "PBMC", self_contained = TRUE, branch = "feat@atlas-projection")
}

}
